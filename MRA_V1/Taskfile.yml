version: '3'

vars:
  MYSQL_PORT: "3306"
  MYSQL_USER: "local_user"
  MYSQL_PASSWORD: "local_password"
  MYSQL_DATABASE: "mra_db"
  MYSQL_CONTAINER: "mra_db"

tasks:
  clean:
    desc: "Remove all generated files"
    cmds:
      - if [ -f "poetry.lock" ]; then rm poetry.lock; fi
      - rm -fr .venv
      - poetry run pip install prisma

  init:
    desc: "Setup project with Poetry, Prisma, and MySQL"
    cmds:
      - task create-env-file
      - poetry install
      - task prisma-generate
      - task run-database
      - poetry run prisma migrate deploy
   
  run:
    desc: "Run the Streamlit app"
    cmds:
      - poetry run prisma migrate deploy
      - poetry run streamlit run src/main.py

  # databse 

  run-database:
    desc: "Start MySQL database with Docker Compose"
    dir: ./compose
    cmds:
      - docker compose up -d  --wait

  stop-database:
    desc: "Stop and remove MySQL database container"
    dir: ./compose
    cmds:
      - docker compose stop

  mysql-prompt:
    desc: "Open MySQL prompt inside Docker container"
    cmds:
      - docker exec -it {{.MYSQL_CONTAINER}}  mysql -h127.0.0.1 -u{{.MYSQL_USER}} -p{{.MYSQL_PASSWORD}} {{.MYSQL_DATABASE}}

  create-env-file:
    desc: Create the .env file (Copy the .env.local file to .env, only if .env does not exist)
    cmds:
      - cp .env.local .env
      - echo "DATABASE_URL=\"mysql://{{.MYSQL_USER}}:{{.MYSQL_PASSWORD}}@127.0.0.1:{{.MYSQL_PORT}}/{{.MYSQL_DATABASE}}\"" >> .env
      - echo "You need to setup your OPENAI_API_KEY key in the .env file"
    status:
      - test -f .env

# Prisma tasks

  prisma-create-migration:
    desc: Create a new Prisma migration, please provide name=<migration-name>, see https://www.prisma.io/docs/orm/prisma-migrate/getting-started
    cmds:
      - poetry run prisma migrate dev --name {{.name}}

  prisma-generate:
    desc: Generate Prisma client, see https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/generating-prisma-client
    cmds:
      - poetry run prisma generate --no-hints

  prisma-seed:
    desc: Seed the database, see https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding
    cmds:
      - poetry run prisma db seed

  prisma-deploy:
    desc: Deploy Prisma migrations, see https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-database-changes-with-prisma-migrate
    cmds:
      - poetry run prisma migrate deploy

 


  #endregion stop tasks
